import os
import google.generativeai as genai
import json
import re
from datetime import datetime
import time
import requests
from bs4 import BeautifulSoup

class GeminiProvider:
    def __init__(self):
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise Exception("‚ùå GEMINI_API_KEY n√£o configurada")
        
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        self.last_request_time = 0
        self.min_interval = 7
        self.request_count = 0
        self.reset_time = time.time()
        
        print("‚úÖ Gemini Provider configurado - 8 RPM m√°ximo")

    def _rate_limit(self):
        """Garante que n√£o estoura os limites"""
        now = time.time()
        
        if now - self.reset_time >= 60:
            self.request_count = 0
            self.reset_time = now
        
        if self.request_count >= 8:
            sleep_time = 60 - (now - self.reset_time)
            if sleep_time > 0:
                print(f"‚è≥ Rate limit: aguardando {sleep_time:.1f}s")
                time.sleep(sleep_time)
            self.request_count = 0
            self.reset_time = time.time()
        
        elapsed = now - self.last_request_time
        if elapsed < self.min_interval:
            time.sleep(self.min_interval - elapsed)
        
        self.last_request_time = time.time()
        self.request_count += 1

    def analyze_article(self, title, summary):
        """Analisa com crit√©rios MUITO rigorosos - APENAS Norte/Nordeste"""
        self._rate_limit()
        
        prompt = f"""
        VOC√ä √â FILTRO DA BRAZMAR MARINE SERVICES - APENAS NORTE/NORDESTE

        REGRA ABSOLUTA: S√ì NOT√çCIAS DO NORTE/NORDESTE BRASILEIRO

        ‚úÖ ACEITAR SOMENTE SE MENCIONAR EXPLICITAMENTE:
        - Maranh√£o, Cear√°, Piau√≠, Bahia, Pernambuco, Alagoas, Sergipe, Para√≠ba, Rio Grande do Norte, Amap√°, Par√°, Amazonas, Rond√¥nia, Acre, Roraima, Tocantins
        - Porto de Itaqui, Pec√©m, Suape, S√£o Lu√≠s, Fortaleza, Bel√©m, Macap√°, Manaus, Recife, Salvador, Natal
        - Regi√£o Norte, Regi√£o Nordeste

        ‚ùå REJEITAR TUDO QUE FOR:
        - Santos, Rio de Janeiro, S√£o Paulo, Sul, Sudeste
        - Qualquer porto/regi√£o fora do Norte/Nordeste
        - Not√≠cias gen√©ricas sem localiza√ß√£o espec√≠fica

        T√çTULO: {title}
        RESUMO: {summary}

        Esta not√≠cia √© ESPECIFICAMENTE sobre a REGI√ÉO NORTE/NORDESTE brasileira?

        Responda APENAS com JSON:
        {{
            "relevante": true/false,
            "confianca": 0-100,
            "motivo": "explica√ß√£o CURTA",
            "urgencia": "BAIXA/MEDIA/ALTA"
        }}
        """
        
        try:
            response = self.model.generate_content(prompt)
            return self._parse_response(response.text)
        except Exception as e:
            print(f"‚ùå Erro Gemini: {e}")
            return self._get_fallback_response()

    def buscar_noticias_ativas(self):
        """üéØ NOVO: BUSCA ATIVA DE NOT√çCIAS COM GEMINI"""
        self._rate_limit()
        
        prompt = """
        VOC√ä √â CA√áADOR DE NOT√çCIAS DA BRAZMAR MARINE SERVICES

        SUA MISS√ÉO: ENCONTRAR NOT√çCIAS ESPEC√çFICAS para a Brazmar Marine Services

        üéØ FOCO ABSOLUTO: NORTE E NORDESTE DO BRASIL

        üîç BUSQUE NOT√çCIAS SOBRE:
        - Opera√ß√µes nos portos: Itaqui (MA), Pec√©m (CE), Suape (PE), S√£o Lu√≠s, Fortaleza, Bel√©m, Macap√°
        - Apoio mar√≠timo a plataformas de petr√≥leo no Norte/Nordeste
        - Movimenta√ß√£o portu√°ria na regi√£o Norte/Nordeste
        - Incidentes/acidentes mar√≠timos nos portos da Brazmar
        - Novas regulamenta√ß√µes da ANTAQ/Marinha para a regi√£o
        - Clima/condi√ß√µes operacionais nos portos do Norte/Nordeste

        üìã FORMATO DA RESPOSTA:
        Forne√ßa uma LISTA de not√≠cias RECENTES e RELEVANTES com:
        - T√≠tulo real da not√≠cia
        - Fonte/ve√≠culo onde pode ser encontrada
        - Breve descri√ß√£o do conte√∫do
        - Data aproximada da not√≠cia

        Exemplo:
        1. "Porto de Itaqui bate recorde de movimenta√ß√£o de gr√£os" - Jornal O Estado do MA - Movimenta√ß√£o de soja no porto aumentou 15% - Outubro 2025
        2. "Marinha autoriza novas opera√ß√µes offshore no Cear√°" - Site da Marinha - Liberada perfura√ß√£o em nova √°rea da Bacia do Cear√° - Outubro 2025

        Liste pelo menos 8-10 not√≠cias RECENTES e RELEVANTES.
        """
        
        try:
            response = self.model.generate_content(prompt)
            return self._parse_busca_ativa(response.text)
        except Exception as e:
            print(f"‚ùå Erro na busca ativa: {e}")
            return []

    def _parse_busca_ativa(self, response_text):
        """Converte a busca ativa em not√≠cias estruturadas"""
        noticias = []
        linhas = response_text.split('\n')
        
        for linha in linhas:
            linha = linha.strip()
            # Procura por padr√µes de not√≠cias (n√∫meros, t√≠tulos, fontes)
            if re.match(r'^\d+[\.\)]', linha) and any(keyword in linha.lower() for keyword in ['porto', 'marinha', 'operacao', 'navio', 'petroleo']):
                # Extrai informa√ß√µes b√°sicas
                partes = re.split(r' - ', linha)
                if len(partes) >= 3:
                    titulo = partes[0].replace('"', '').strip()
                    # Remove o n√∫mero do in√≠cio se existir
                    titulo = re.sub(r'^\d+[\.\)]\s*', '', titulo)
                    
                    fonte = partes[1].strip()
                    descricao = partes[2].strip()
                    
                    noticias.append({
                        'title': titulo,
                        'source': fonte,
                        'summary': descricao,
                        'type': 'gemini_active_search',
                        'search_timestamp': datetime.now().isoformat()
                    })
        
        return noticias[:10]  # Limita a 10 not√≠cias

    def _parse_response(self, response_text):
        """Parse da resposta do Gemini"""
        try:
            cleaned = re.sub(r'```json|```', '', response_text).strip()
            json_match = re.search(r'\{[^}]+\}', cleaned, re.DOTALL)
            if json_match:
                result = json.loads(json_match.group())
                if 'relevante' in result:
                    return result
        except Exception as e:
            print(f"‚ùå Erro parse: {e}")
        
        return self._get_fallback_response()

    def _get_fallback_response(self):
        """Fallback SUPER RESTRITIVO"""
        return {
            "relevante": False,
            "confianca": 10,
            "motivo": "An√°lise falhou - conservador",
            "urgencia": "BAIXA"
        }

# Inst√¢ncia global
gemini_provider = GeminiProvider()